# Pw_generator

import random  # Importiert die Bibliothek f√ºr Zufallsfunktionen
import string  # Importiert die Bibliothek f√ºr Zeichenfunktionen


# Funktion zur Passwortgenerierung
def passwort_generieren(laenge):  # Erstellt ein Passwort mit zuf√§lligen Zeichen basierend auf der angegebenen L√§nge
    if laenge < 8:  # √úberpr√ºft, ob die Passwortl√§nge kleiner als 8 ist
        raise ValueError(
            "Das Passwort muss mindestens 8 Zeichen lang sein.")  # Gibt einen Fehler aus, wenn die L√§nge zu kurz ist

    # Definiert die Kategorien von Zeichen, die verwendet werden k√∂nnen
    upper = string.ascii_uppercase  # Gro√übuchstaben (A-Z)
    lower = string.ascii_lowercase  # Kleinbuchstaben (a-z)
    digits = string.digits  # Ziffern (0-9)
    special = "!@#$%^&*()_+-=[]{}|;,.<>?/"  # Sonderzeichen

    # F√ºgt mindestens ein Zeichen aus jeder Kategorie in die Liste ein
    all_chars = [
        random.choice(upper),  # W√§hlt einen zuf√§lligen Gro√übuchstaben
        random.choice(lower),  # W√§hlt einen zuf√§lligen Kleinbuchstaben
        random.choice(digits),  # W√§hlt eine zuf√§llige Ziffer
        random.choice(special)  # W√§hlt ein zuf√§lliges Sonderzeichen
    ]

    # Berechnet die Anzahl der noch fehlenden Zeichen f√ºr das Passwort
    restliche_laenge = laenge - len(all_chars)
    if restliche_laenge > 0:  # Falls noch Zeichen ben√∂tigt werden
        # Erg√§nzt die Liste mit zuf√§lligen Zeichen aus allen Kategorien
        all_chars.extend(random.choices(upper + lower + digits + special, k=restliche_laenge))

    random.shuffle(all_chars)  # Mischt die Liste, um die Zeichen zuf√§llig anzuordnen
    return ''.join(all_chars)  # Gibt die Liste als Zeichenkette zur√ºck


# Funktion zum Speichern eines Anbieters und seines Passworts
def passwortspeichern():
    with open("pwd.txt", "a") as file:  # √ñffnet die Datei "pwd.txt" im Anhangsmodus
        passwortliste = {}  # Erstellt ein leeres Dictionary f√ºr Anbieter und Passw√∂rter
        anbieter = input("Welchen Anbieter wollen Sie speichern? ").lower()  # Fragt nach dem Anbieter
        laenge = int(input("Wie lang darf das Passwort sein? "))  # Fragt nach der gew√ºnschten Passwortl√§nge
        passwort = passwort_generieren(laenge)  # Generiert ein Passwort basierend auf der gew√ºnschten L√§nge
        passwortliste[anbieter] = passwort  # Speichert den Anbieter und das Passwort im Dictionary
        file.write(
            f"{anbieter}:{passwort}+\n")  # Schreibt Anbieter und Passwort im Format "anbieter:passwort" in die Datei
        print("\n‚úîÔ∏è Passwort erfolgreich gespeichert!\n")
        return passwortliste  # Gibt die Passwortliste zur√ºck


# Funktion, um gespeicherte Passw√∂rter anzuzeigen
def passwoerter_anzeigen():
    passwortliste3 = {}  # Erstellt ein leeres Dictionary f√ºr die geladenen Passw√∂rter
    eingabe_anbieter = input(
        "Welchen Anbieter m√∂chtest du abrufen? Optional \" alle\" eingeben ").lower()  # Fragt nach dem Anbieter und wandelt die Eingabe in Kleinbuchstaben um

    with open("pwd.txt", "r") as file:  # √ñffnet die Datei "pwd.txt" im Lesemodus
        for line in file:  # Iteriert durch jede Zeile in der Datei
            elemente = line.strip().split(":")  # Teilt die Zeile in Anbieter und Passwort anhand des Doppelpunkts
            passwortliste3[elemente[0]] = elemente[
                1]  # Speichert den Anbieter und das verschl√ºsselte Passwort im Dictionary

        if eingabe_anbieter in passwortliste3:  # Pr√ºft, ob der eingegebene Anbieter in der Passwortliste vorhanden ist
            wert = passwortliste3[eingabe_anbieter]  # Holt das Passwort f√ºr den Anbieter
            print(
                f"\nüîì Passwort f√ºr {eingabe_anbieter}: {entschluesseln(wert, schl√ºssel, liste_von_zeichen)}\n")  # Entschl√ºsselt das Passwort und gibt es aus
        elif eingabe_anbieter == "alle":
            with open("pwd.txt", "r") as alle:
                werte = alle.read()
                print(werte)
        else:  # Falls der Anbieter nicht gefunden wurde
            print("\n‚ùå Ein solches Passwort liegt nicht vor.\n")  # Gibt eine Fehlermeldung aus


# Funktion zum L√∂schen eines Anbieters und seines Passworts
def passwoert_loeschen():
    passwortliste3 = {}  # Erstellt ein leeres Dictionary f√ºr die geladenen Passw√∂rter
    loeschen_anbieter = input(
        "L√∂sche einen Anbieter: ").lower()  # Fragt nach dem Anbieter und wandelt die Eingabe in Kleinbuchstaben um

    with open("pwd.txt", "r") as file:  # √ñffnet die Datei "pwd.txt" im Lesemodus
        for line in file:  # Iteriert durch jede Zeile in der Datei
            elemente = line.strip().split(":")  # Teilt die Zeile in Anbieter und Passwort
            passwortliste3[elemente[0]] = elemente[1]  # Speichert den Anbieter und das Passwort im Dictionary

        if loeschen_anbieter in passwortliste3:  # Pr√ºft, ob der Anbieter existiert
            passwortliste3.pop(loeschen_anbieter)  # Entfernt den Anbieter und das Passwort aus dem Dictionary
            print(f"\n‚úîÔ∏è Passwort f√ºr {loeschen_anbieter} erfolgreich gel√∂scht.\n")
        else:  # Falls der Anbieter nicht gefunden wurde
            print("\n‚ùå Ein solches Passwort ist nicht gespeichert.\n")

    with open("pwd.txt", "w") as file:  # √ñffnet die Datei "pwd.txt" im Schreibmodus
        for key, value in passwortliste3.items():  # Iteriert durch die verbleibenden Daten
            file.write(f"{key}:{value}\n")  # Schreibt die verbleibenden Anbieter und Passw√∂rter zur√ºck in die Datei


# Funktion zur Definition des Verschl√ºsselungsschl√ºssels
def verschl√ºsselung_definieren():
    try:  # Versucht, den Schl√ºssel aus einer Datei zu lesen
        with open("key.txt", "r") as keyfile:  # √ñffnet die Datei "key.txt" im Lesemodus
            n = keyfile.read()  # Liest den gespeicherten Schl√ºssel
    except:  # Falls die Datei nicht existiert
        with open("key.txt", "w") as keyfile:  # Erstellt die Datei "key.txt" im Schreibmodus
            aufforderung_vergabe = input("Wie lautet der Schl√ºssel? ")  # Fragt den Benutzer nach einem Schl√ºssel
            n = aufforderung_vergabe  # Speichert den Schl√ºssel in der Variablen
            keyfile.write(n)  # Schreibt den Schl√ºssel in die Datei
    return n  # Gibt den Schl√ºssel zur√ºck


# Funktion zur Verschl√ºsselung von Texten
def master_passwort(text, shift, liste_von_zeichen):
    verschluesselt = []
    for zeichen in text:
        if zeichen in liste_von_zeichen:
            index = liste_von_zeichen.index(zeichen)
            neuer_index = (index + shift) % len(liste_von_zeichen)
            verschluesselt.append(liste_von_zeichen[neuer_index])
        else:
            verschluesselt.append(zeichen)
    return "".join(verschluesselt)


# Funktion zur Entschl√ºsselung von Texten
def entschluesseln(verschl√ºsseltes_passwort, shift, liste_von_zeichen):
    unverschluesselt = []
    for zeichen in verschl√ºsseltes_passwort:
        if zeichen in liste_von_zeichen:
            index = liste_von_zeichen.index(zeichen)
            neuer_index = (index - shift) % len(liste_von_zeichen)
            unverschluesselt.append(liste_von_zeichen[neuer_index])
        else:
            unverschluesselt.append(zeichen)
    return "".join(unverschluesselt)


# Benutzeroberfl√§che
def benutzeroberflaeche():
    counter = 3
    print("\n" + "=" * 40)
    print(" HERZLICH WILLKOMMEN ZUM PASSWORTGENERATOR ")
    print("=" * 40 + "\n")

    while True:
        try:
            with open("master.txt", "r") as master:
                wert_master = master.read()
                print("\nBitte geben Sie Ihr Masterpasswort ein:\n")
                passworteingabe = input("> ")
                passwort_eingabe_verschl√ºsselt = master_passwort(passworteingabe, schl√ºssel, liste_von_zeichen)

                if passwort_eingabe_verschl√ºsselt == wert_master:
                    print("\nüéâ Zugang erfolgreich! Willkommen im Passwortmanager üéâ\n")
                    break
                else:
                    counter -= 1
                    print(f"‚ö†Ô∏è  Falsches Passwort. Verbleibende Versuche: {counter}")
                    if counter == 0:
                        print("\n‚ùå Zu viele Fehlversuche. Alle gespeicherten Passw√∂rter werden gel√∂scht. ‚ùå\n")
                        with open("pwd.txt", "w") as file:
                            file.write("")
                        break
        except FileNotFoundError:
            print("\n‚öôÔ∏è  Masterpasswort erstellen ‚öôÔ∏è\n")
            while True:
                vergabe_passwort = input("Neues Masterpasswort (min. 12 Zeichen):\n> ")
                eintrag_passwort_verschl√ºsselt = master_passwort(vergabe_passwort, schl√ºssel, liste_von_zeichen)
                if len(eintrag_passwort_verschl√ºsselt) < 12:
                    print("\n‚ö†Ô∏è  Passwort zu kurz! Es muss mindestens 12 Zeichen lang sein. ‚ö†Ô∏è\n")
                    continue
                else:
                    with open("master.txt", "w") as master:
                        bestaetigung = input("Bitte best√§tigen Sie Ihr Passwort:\n> ")
                        if eintrag_passwort_verschl√ºsselt == master_passwort(bestaetigung, schl√ºssel,
                                                                             liste_von_zeichen):
                            print("\n‚úîÔ∏è  Masterpasswort erfolgreich erstellt! ‚úîÔ∏è\n")
                            master.write(eintrag_passwort_verschl√ºsselt)
                            break

                        # Hauptprogramm


liste_von_zeichen = list(string.ascii_letters + string.digits + string.punctuation + " ")
schl√ºssel = int(verschl√ºsselung_definieren())

if __name__ == "__main__":
    benutzeroberflaeche()

    while True:
        print("\n1: Passw√∂rter anzeigen")
        print("2: Passw√∂rter generieren und speichern")
        print("3: Passw√∂rter l√∂schen")
        print("4: Programm beenden")

        try:
            eingabe = int(input("\nBitte eine Option ausw√§hlen: "))
        except ValueError:
            print("\n‚ùå Ung√ºltige Eingabe. Bitte eine Zahl zwischen 1 und 4 eingeben.\n")
            continue

        match eingabe:
            case 1:
                passwoerter_anzeigen()
            case 2:
                passwortspeichern()
            case 3:
                passwoert_loeschen()
            case 4:
                input("\nDr√ºcken Sie eine beliebige Taste, um das Programm zu beenden.\n")
                break
            case _:
                print("\n‚ùå Ung√ºltige Auswahl. Bitte eine Zahl zwischen 1 und 4 eingeben.\n")
