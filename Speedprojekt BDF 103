print(Speedprojekt BDF 103)
print(Pw_generator)

import random # Importiert einen Zufallsgenerator-Bib
import string # Importiert die String-Bib um ascii-letters, zahlen und interpunktion einfacher verwenden zu können.

def generate(länge):  # Funktion zur Erstellung eines Zufallspassworts mit einer vorgegebenen Länge
    passwort = (string.ascii_letters + string.digits + string.punctuation).replace(":", ";")
    # Die Variable "passwort" enthält:
    # - Groß- und Kleinbuchstaben (string.ascii_letters)
    # - Ziffern (string.digits)
    # - Sonderzeichen (string.punctuation)
    # Zusätzlich wird das Zeichen ":" durch ";" ersetzt, da ":" nicht verwendet werden soll.

    return ''.join(random.choice(passwort) for i in range(länge)) # Die Funktion gibt das generierte Passwort zurück.
    # Dabei wird "random.choice" verwendet, um für die angegebene Länge "länge" zufällig Zeichen aus der Variable "passwort" auszuwählen.
    # mit "join" werden die einzelnen Zeichen zu einem String verbunden.


def passwortspeichern():# Funktion zur Passwortspeicherung in einer textdatei
    with open("pwd.txt" , "a")as file: #Der with-block sorgt dafür, dass die Datei automatisch wieder geschlossen wird, modus "a" sorgt dafür, dass, anders als bei "w" neue elemente angehangen und nicht die ganze datei überschrieben wird.
        passwortliste = {} #leeres Dictionary wird erzeugt
        anbieter = input("Welchen Anbieter wollen Sie speichern") #Der Nutzer wird nach einer Eingabe gefragt
        generiertes_passwort = generate(16) #es wird mit der funktion "generate" ein passwort mit 16 Zeichen erstellt
        passwortliste[anbieter]=generiertes_passwort  #Eintrag ins dictionary wird erstellt wobei input der Key ist und das generierte PW der Schlüssel
        file.write(f"{anbieter}:{generiertes_passwort}+\n") #der key und die value wird in die pwd.txt datei geschrieben und eine neue Zeile wird erstellt.
        print(passwortliste)
        return passwortliste

def passwoerter_anzeigen(anbieter):
    pwd_zwischenspeicher = {} #temporäre
    with open("pwd.txt" , "r")as file:
        for line in file:
            elemente = line.strip().split(":")
            pwd_zwischenspeicher[elemente[0]] = elemente[1]
        if anbieter in pwd_zwischenspeicher.keys():
            print(pwd_zwischenspeicher[anbieter])
        elif anbieter == "alle":
            print(pwd_zwischenspeicher)
        else:
            print("Ein solches Passwort liegt nicht vor")

def passwoert_loeschen(anbieter):
    pwd_zwischenspeicher = {}
    with open("pwd.txt", "r") as file:
        for line in file:
            elemente = line.strip().split(":")
            pwd_zwischenspeicher[elemente[0]] = elemente[1]

        if anbieter in pwd_zwischenspeicher:
            pwd_zwischenspeicher.pop(anbieter)
            print(f"Passwort {anbieter} gelöscht")
        else:
            print("Du hast dieses Passwort nicht gespeichert")
        with open("pwd.txt", "w") as file:
            for key, value in pwd_zwischenspeicher.items():
                print(f"{key}:{value}")
                file.write(f"{key}:{value}\n")

def benutzeroberfläche():
    print("Herzlich Willkommen zum Passwortgenerator.\n")
    with open("master.txt", "r")as file:
        for elemente in file:
            if len(elemente) == 0:
                vergabe_passwort = int(input("Bitte vergeben Sie sich ein Passwort")).encode("utf-8")
            else:
                with open("master.txt", "r")as file:
                    for element in file:
                        elementsauber= element.strip()
                    passworteingabe = input("Geben Sie zunächst Ihr Passwort ein").encode("utf-8")
                    if passworteingabe == elementsauber:
                        print("Herzlich Willkommen")
                        auswahl_manager= input("Pass")

passwortspeichern()
loeschen_anbieter = input("Lösche einen Anbieter!").lower()
passwoert_loeschen(loeschen_anbieter)

eingabe_anbieter = input("Welchen Anbieter möchtes du abrufen?").lower()
passwoerter_anzeigen(eingabe_anbieter)

if __name__ == "__main__":
